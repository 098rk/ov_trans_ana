import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.cluster.hierarchy import linkage, dendrogram, fcluster
from scipy.spatial.distance import pdist
from collections import defaultdict

# Load Data
file_path = "D:\\ProjectFiles\\Geeks\saptial\\Parent_Visium_Human_OvarianCancer_analysis\\analysis\pca\\10_components\\components.csv"  # Change to actual file path
df = pd.read_csv(file_path)

# Extract PC numbers and gene expression values
pc_numbers = df["PC"]
pc_values = df.drop(columns=["PC"])

# Compute explained variance
explained_variance = np.var(pc_values, axis=1)
explained_variance_ratio = explained_variance / np.sum(explained_variance)

# Plot Explained Variance Ratio
plt.figure(figsize=(8, 5))
plt.plot(pc_numbers, explained_variance_ratio, marker='o', linestyle='-')
plt.xlabel("Principal Component")
plt.ylabel("Explained Variance Ratio")
plt.title("Explained Variance by Principal Component")
plt.grid()
plt.show()

# Compute Correlation of Top 5 PCs
top_pc_indices = [8, 9, 7, 4, 6]
top_pc_data = pc_values.iloc[top_pc_indices].T
correlation_matrix = top_pc_data.corr()

# Heatmap of Correlations
plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Matrix of Top Principal Components")
plt.show()

# Hierarchical Clustering for Top 500 Variable Genes
top_variable_genes = pc_values.var().sort_values(ascending=False).index[:500]
pc_values_reduced = pc_values[top_variable_genes]
gene_distances_reduced = pdist(pc_values_reduced.T, metric='euclidean')
gene_linkage_reduced = linkage(gene_distances_reduced, method='ward')

# Plot Dendrogram
plt.figure(figsize=(12, 5))
dendrogram(gene_linkage_reduced, no_labels=True, color_threshold=0.7 * max(gene_linkage_reduced[:, 2]))
plt.title("Hierarchical Clustering of Top 500 Most Variable Genes")
plt.xlabel("Genes")
plt.ylabel("Distance")
plt.show()

# Extract Cluster Assignments
clusters_reduced = fcluster(gene_linkage_reduced, t=5, criterion='maxclust')
largest_cluster_reduced = pd.Series(clusters_reduced).value_counts().idxmax()
genes_in_largest_cluster_reduced = pc_values_reduced.columns[pd.Series(clusters_reduced) == largest_cluster_reduced]

# Top 10 Contributing Genes to PC1
pc1_loadings_reduced = pc_values.iloc[0][top_variable_genes].abs().sort_values(ascending=False)[:10]

# Functional Annotation (Mock Data)
gene_annotations = {
    "ENSG00000198786": "Cell cycle regulation",
    "ENSG00000019582": "Tumor suppression",
    "ENSG00000269028": "DNA repair",
    "ENSG00000102854": "Apoptosis regulation",
    "ENSG00000087086": "Immune response",
    "ENSG00000204287": "Angiogenesis",
    "ENSG00000245532": "Cell proliferation",
    "ENSG00000269821": "Metastasis",
    "ENSG00000130208": "Chromatin remodeling",
    "ENSG00000154096": "Inflammatory response",
}

annotations = defaultdict(list)
for gene, function in gene_annotations.items():
    annotations[function].append(gene)

# Functional Annotation Visualization
plt.figure(figsize=(8, 5))
plt.barh(list(annotations.keys()), [len(v) for v in annotations.values()], color="skyblue")
plt.xlabel("Number of Genes")
plt.ylabel("Biological Function")
plt.title("Functional Annotation of Top Genes")
plt.gca().invert_yaxis()
plt.show()

# Scree Plot for PCA Variance Explained
plt.figure(figsize=(8, 5))
plt.bar(pc_numbers, explained_variance_ratio * 100, color="lightcoral", alpha=0.7)
plt.xlabel("Principal Component")
plt.ylabel("Variance Explained (%)")
plt.title("Scree Plot of PCA Components")
plt.show()

# Output Key Results
print("Top Contributing Genes to PC1:")
print(pc1_loadings_reduced)
print("\nGenes in Largest Cluster:")
print(genes_in_largest_cluster_reduced[:10])


# Load Data
file_path = "D:\\ProjectFiles\\Geeks\saptial\\Parent_Visium_Human_OvarianCancer_analysis\\analysis\diffexp\\graphclust\\differential_expression.csv"  # Updated file




df = pd.read_csv(file_path)

# Extract relevant columns
gene_ids = df["Feature ID"]
gene_names = df["Feature Name"]
log2_fold_changes = df.filter(like="Log2 fold change")
adjusted_p_values = df.filter(like="Adjusted p value")

# Identify significant genes (adjusted p-value < 0.05)
significant_genes = (adjusted_p_values < 0.05).sum(axis=1)
df["Significant Clusters"] = significant_genes

# Top 20 most significant genes
top_significant_genes = df.sort_values(by="Significant Clusters", ascending=False).head(20)

# Heatmap of Log2 Fold Changes for Top Genes
plt.figure(figsize=(12, 6))
sns.heatmap(top_significant_genes[log2_fold_changes.columns], annot=True, cmap="coolwarm", center=0)
plt.title("Log2 Fold Changes of Top 20 Most Significant Genes")
plt.xlabel("Clusters")
plt.ylabel("Genes")
plt.show()

# Hierarchical Clustering for Top 500 Variable Genes
top_variable_genes = log2_fold_changes.var().sort_values(ascending=False).index[:500]
log2_fold_changes_reduced = log2_fold_changes[top_variable_genes]
gene_distances_reduced = pdist(log2_fold_changes_reduced, metric='euclidean')
gene_linkage_reduced = linkage(gene_distances_reduced, method='ward')

# Ensure correct number of labels
gene_labels = log2_fold_changes_reduced.index.tolist()

# Plot Dendrogram with Labels
plt.figure(figsize=(15, 6))
dendrogram(
    gene_linkage_reduced, labels=gene_labels[:gene_linkage_reduced.shape[0] + 1], leaf_rotation=90, leaf_font_size=8, color_threshold=0.7 * max(gene_linkage_reduced[:, 2])
)
plt.title("Hierarchical Clustering of Top 500 Most Variable Genes")
plt.xlabel("Genes")
plt.ylabel("Distance")
plt.grid(True)
plt.show()

# Extract Cluster Assignments
clusters_reduced = fcluster(gene_linkage_reduced, t=5, criterion='maxclust')
largest_cluster_reduced = pd.Series(clusters_reduced).value_counts().idxmax()
genes_in_largest_cluster_reduced = log2_fold_changes_reduced.index[pd.Series(clusters_reduced) == largest_cluster_reduced]

# Top 10 Differentially Expressed Genes
top_de_genes = log2_fold_changes.abs().mean(axis=1).sort_values(ascending=False).head(10)

# Functional Annotation (Mock Data)
gene_annotations = {
    "ENSG00000198786": "Cell cycle regulation",
    "ENSG00000019582": "Tumor suppression",
    "ENSG00000269028": "DNA repair",
    "ENSG00000102854": "Apoptosis regulation",
    "ENSG00000087086": "Immune response",
    "ENSG00000204287": "Angiogenesis",
    "ENSG00000245532": "Cell proliferation",
    "ENSG00000269821": "Metastasis",
    "ENSG00000130208": "Chromatin remodeling",
    "ENSG00000154096": "Inflammatory response",
}

annotations = defaultdict(list)
for gene, function in gene_annotations.items():
    annotations[function].append(gene)

# Functional Annotation Visualization
plt.figure(figsize=(8, 5))
plt.barh(list(annotations.keys()), [len(v) for v in annotations.values()], color="skyblue")
plt.xlabel("Number of Genes")
plt.ylabel("Biological Function")
plt.title("Functional Annotation of Top Genes")
plt.gca().invert_yaxis()
plt.show()

# Output Key Results
print("Top Differentially Expressed Genes:")
print(top_de_genes)
print("\nGenes in Largest Cluster:")
print(genes_in_largest_cluster_reduced[:10])

# Load Data
file_path = "D:\\ProjectFiles\\Geeks\\saptial\\Parent_Visium_Human_OvarianCancer_analysis\\analysis\\tsne\\2_components\\projection.csv"  # Updated file
df = pd.read_csv(file_path)

# Extract PC numbers and gene expression values
pc_numbers = df.columns[1:]
pc_values = df.iloc[:, 1:]

# Compute explained variance
explained_variance = np.var(pc_values, axis=0)
explained_variance_ratio = explained_variance / np.sum(explained_variance)

# Plot Explained Variance Ratio
plt.figure(figsize=(8, 5))
plt.plot(range(1, len(pc_numbers)+1), explained_variance_ratio, marker='o', linestyle='-')
plt.xlabel("Principal Component")
plt.ylabel("Explained Variance Ratio")
plt.title("Explained Variance by Principal Component")
plt.grid()
plt.show()

# Compute Correlation of Top 5 PCs
top_pc_indices = np.argsort(explained_variance)[-5:]
top_pc_data = pc_values.iloc[:, top_pc_indices]
correlation_matrix = top_pc_data.corr()

# Heatmap of Correlations
plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Matrix of Top Principal Components")
plt.show()

# Hierarchical Clustering for Top 500 Variable Genes
top_variable_genes = pc_values.var().sort_values(ascending=False).index[:500]
pc_values_reduced = pc_values[top_variable_genes]
gene_distances_reduced = pdist(pc_values_reduced.T, metric='euclidean')
gene_linkage_reduced = linkage(gene_distances_reduced, method='ward')

# Plot Dendrogram
plt.figure(figsize=(12, 5))
dendrogram(gene_linkage_reduced, no_labels=True, color_threshold=0.7 * max(gene_linkage_reduced[:, 2]))
plt.title("Hierarchical Clustering of Top 500 Most Variable Genes")
plt.xlabel("Genes")
plt.ylabel("Distance")
plt.show()

# Extract Cluster Assignments
clusters_reduced = fcluster(gene_linkage_reduced, t=5, criterion='maxclust')
largest_cluster_reduced = pd.Series(clusters_reduced).value_counts().idxmax()
genes_in_largest_cluster_reduced = pc_values_reduced.columns[pd.Series(clusters_reduced) == largest_cluster_reduced]

# Top 10 Contributing Genes to PC1
pc1_loadings_reduced = pc_values.iloc[:, 0].abs().sort_values(ascending=False)[:10]

# Functional Annotation (Mock Data)
gene_annotations = {
    "ENSG00000198786": "Cell cycle regulation",
    "ENSG00000019582": "Tumor suppression",
    "ENSG00000269028": "DNA repair",
    "ENSG00000102854": "Apoptosis regulation",
    "ENSG00000087086": "Immune response",
    "ENSG00000204287": "Angiogenesis",
    "ENSG00000245532": "Cell proliferation",
    "ENSG00000269821": "Metastasis",
    "ENSG00000130208": "Chromatin remodeling",
    "ENSG00000154096": "Inflammatory response",
}

annotations = defaultdict(list)
for gene, function in gene_annotations.items():
    annotations[function].append(gene)

# Functional Annotation Visualization
plt.figure(figsize=(8, 5))
plt.barh(list(annotations.keys()), [len(v) for v in annotations.values()], color="skyblue")
plt.xlabel("Number of Genes")
plt.ylabel("Biological Function")
plt.title("Functional Annotation of Top Genes")
plt.gca().invert_yaxis()
plt.show()

# Scree Plot for PCA Variance Explained
plt.figure(figsize=(8, 5))
plt.bar(range(1, len(pc_numbers)+1), explained_variance_ratio * 100, color="lightcoral", alpha=0.7)
plt.xlabel("Principal Component")
plt.ylabel("Variance Explained (%)")
plt.title("Scree Plot of PCA Components")
plt.show()

# Output Key Results
print("Top Contributing Genes to PC1:")
print(pc1_loadings_reduced)
print("\nGenes in Largest Cluster:")
print(genes_in_largest_cluster_reduced[:10])
